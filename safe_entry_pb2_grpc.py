# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import safe_entry_pb2 as safe__entry__pb2


class SafeEntryStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CheckInIndividual = channel.unary_unary(
                '/safe_entry.SafeEntry/CheckInIndividual',
                request_serializer=safe__entry__pb2.CheckInIndividualRequest.SerializeToString,
                response_deserializer=safe__entry__pb2.CheckOutIndividualReply.FromString,
                )
        self.CheckInGroup = channel.unary_unary(
                '/safe_entry.SafeEntry/CheckInGroup',
                request_serializer=safe__entry__pb2.CheckInGroupRequest.SerializeToString,
                response_deserializer=safe__entry__pb2.CheckOutGroupReply.FromString,
                )
        self.CheckOutIndividual = channel.unary_unary(
                '/safe_entry.SafeEntry/CheckOutIndividual',
                request_serializer=safe__entry__pb2.CheckOutIndividualRequest.SerializeToString,
                response_deserializer=safe__entry__pb2.CheckOutIndividualReply.FromString,
                )
        self.CheckOutGroup = channel.unary_unary(
                '/safe_entry.SafeEntry/CheckOutGroup',
                request_serializer=safe__entry__pb2.CheckOutGroupRequest.SerializeToString,
                response_deserializer=safe__entry__pb2.CheckOutGroupReply.FromString,
                )
        self.CheckInHistory = channel.unary_unary(
                '/safe_entry.SafeEntry/CheckInHistory',
                request_serializer=safe__entry__pb2.CheckInHistoryRequest.SerializeToString,
                response_deserializer=safe__entry__pb2.CheckInHistoryReply.FromString,
                )


class SafeEntryServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CheckInIndividual(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckInGroup(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckOutIndividual(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckOutGroup(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckInHistory(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SafeEntryServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CheckInIndividual': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckInIndividual,
                    request_deserializer=safe__entry__pb2.CheckInIndividualRequest.FromString,
                    response_serializer=safe__entry__pb2.CheckOutIndividualReply.SerializeToString,
            ),
            'CheckInGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckInGroup,
                    request_deserializer=safe__entry__pb2.CheckInGroupRequest.FromString,
                    response_serializer=safe__entry__pb2.CheckOutGroupReply.SerializeToString,
            ),
            'CheckOutIndividual': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckOutIndividual,
                    request_deserializer=safe__entry__pb2.CheckOutIndividualRequest.FromString,
                    response_serializer=safe__entry__pb2.CheckOutIndividualReply.SerializeToString,
            ),
            'CheckOutGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckOutGroup,
                    request_deserializer=safe__entry__pb2.CheckOutGroupRequest.FromString,
                    response_serializer=safe__entry__pb2.CheckOutGroupReply.SerializeToString,
            ),
            'CheckInHistory': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckInHistory,
                    request_deserializer=safe__entry__pb2.CheckInHistoryRequest.FromString,
                    response_serializer=safe__entry__pb2.CheckInHistoryReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'safe_entry.SafeEntry', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SafeEntry(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CheckInIndividual(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/safe_entry.SafeEntry/CheckInIndividual',
            safe__entry__pb2.CheckInIndividualRequest.SerializeToString,
            safe__entry__pb2.CheckOutIndividualReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CheckInGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/safe_entry.SafeEntry/CheckInGroup',
            safe__entry__pb2.CheckInGroupRequest.SerializeToString,
            safe__entry__pb2.CheckOutGroupReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CheckOutIndividual(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/safe_entry.SafeEntry/CheckOutIndividual',
            safe__entry__pb2.CheckOutIndividualRequest.SerializeToString,
            safe__entry__pb2.CheckOutIndividualReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CheckOutGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/safe_entry.SafeEntry/CheckOutGroup',
            safe__entry__pb2.CheckOutGroupRequest.SerializeToString,
            safe__entry__pb2.CheckOutGroupReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CheckInHistory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/safe_entry.SafeEntry/CheckInHistory',
            safe__entry__pb2.CheckInHistoryRequest.SerializeToString,
            safe__entry__pb2.CheckInHistoryReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class SpecialAccessStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.MarkCluster = channel.unary_unary(
                '/safe_entry.SpecialAccess/MarkCluster',
                request_serializer=safe__entry__pb2.MarkClusterRequest.SerializeToString,
                response_deserializer=safe__entry__pb2.MarkClusterReply.FromString,
                )


class SpecialAccessServicer(object):
    """Missing associated documentation comment in .proto file."""

    def MarkCluster(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SpecialAccessServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'MarkCluster': grpc.unary_unary_rpc_method_handler(
                    servicer.MarkCluster,
                    request_deserializer=safe__entry__pb2.MarkClusterRequest.FromString,
                    response_serializer=safe__entry__pb2.MarkClusterReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'safe_entry.SpecialAccess', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SpecialAccess(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def MarkCluster(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/safe_entry.SpecialAccess/MarkCluster',
            safe__entry__pb2.MarkClusterRequest.SerializeToString,
            safe__entry__pb2.MarkClusterReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class NotificationStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SubscribeNotification = channel.unary_stream(
                '/safe_entry.Notification/SubscribeNotification',
                request_serializer=safe__entry__pb2.NotificationRequest.SerializeToString,
                response_deserializer=safe__entry__pb2.NotificationResponse.FromString,
                )


class NotificationServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SubscribeNotification(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_NotificationServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SubscribeNotification': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeNotification,
                    request_deserializer=safe__entry__pb2.NotificationRequest.FromString,
                    response_serializer=safe__entry__pb2.NotificationResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'safe_entry.Notification', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Notification(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SubscribeNotification(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/safe_entry.Notification/SubscribeNotification',
            safe__entry__pb2.NotificationRequest.SerializeToString,
            safe__entry__pb2.NotificationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
